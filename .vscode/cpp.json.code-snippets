{
  "atcoder": {
    "prefix": "atcoder",
    "body": [
      "#include <bits/stdc++.h>",
      "#define fi first",
      "#define se second",
      "#define rep(i,n) for(int i = 0; i < (n); ++i) // 0からnまでループ",
      "#define drep(i,n) for(int i = (n)-1; i >= 0; --i) // nから0までループ",
      "#define srep(i,s,t) for (int i = s; i < t; ++i) // sからtまでループ",
      "#define rng(a) a.begin(),a.end()",
      "#define maxs(x,y) (x = max(x,y))",
      "#define mins(x,y) (x = min(x,y))",
      "#define limit(x,l,r) max(l,min(x,r))",
      "#define lims(x,l,r) (x = max(l,min(x,r)))",
      "#define isin(x,l,r) ((l) <= (x) && (x) < (r))",
      "#define pb push_back",
      "#define sz(x) (int)(x).size()",
      "#define pcnt __builtin_popcountll",
      "#define uni(x) x.erase(unique(rng(x)),x.end())",
      "#define snuke srand((unsigned)clock()+(unsigned)time(NULL));",
      "#define show(x) cout<<#x<<\" = \"<<x<<endl;",
      "#define PQ(T) priority_queue<T,v(T),greater<T> >",
      "#define bn(x) ((1<<x)-1)",
      "#define dup(x,y) (((x)+(y)-1)/(y))",
      "#define newline puts(\"\")",
      "#define v(T) vector<T>",
      "#define vv(T) v(v(T))",
      "using namespace std;",
      "typedef long long int ll;",
      "typedef unsigned uint;",
      "typedef unsigned long long ull;",
      "typedef pair<int,int> P;",
      "typedef set<int> S;",
      "typedef queue<int> Q;",
      "typedef queue<P> QP;",
      "typedef vector<int> vi;",
      "typedef vector<vi> vvi;",
      "typedef vector<ll> vl;",
      "typedef vector<P> vp;",
      "inline int in() { int x; scanf(\"%d\",&x); return x;} // 入力",
      "const ll LINF = 1001002003004005006ll;",
      "const int INF = 1001001001;",
      "const int MOD = 1000000007;",
      "#define yn {puts(\"YES\");}else{puts(\"NO\");}",
      "\t",
      "int main() {",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "Atcoderではじめに打つやつ"
  },
  "atcA": {
    "prefix": "atcA",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "int main() {",
      "    int a;",
      "    cin >> a;",
      "    if(a > $1) {",
      "        cout << \"$2\" << endl;",
      "    } else {",
      "        cout << \"$3\" << endl;",
      "    }",
      "  ",
      "    return 0;",
      "}"
    ]
  },
  "unionfind": {
    "prefix": "UnionFind",
    "body": [
      "class UnionFind {",
      "    public:  ",
      "        vi Parent;",
      "        UnionFind(int N) {",
      "            Parent = vi(N,-1);",
      "        }",
      "\t",
      "            int root(int A) {",
      "            if(Parent[A] < 0) return A;",
      "            return Parent[A] = root(Parent[A]);",
      "        }",
      "",
      "            int size(int A) {",
      "            return -Parent[root(A)];",
      "        }",
      "\t",
      "            bool connect(int A,int B) {",
      "            A = root(A);",
      "            B = root(B);",
      "            if(A == B) return false;",
      "            if(size(A) < size(B)) swap(A,B);",
      "            Parent[A] += Parent[B];",
      "            Parent[B] = A;",
      "            return true;",
      "        }",
      "};"
    ],
    "description": ""
  },
  "primefact": {
    "prefix": "primefact",
    "body": [
      "vector<pair<ll, int>> Pfact(ll num) {",
      "    vector<pair<ll, int>> res;",
      "    for (ll i = 2; i * i <= num; i++) {",
      "        int cnt = 0;",
      "        while (num % i == 0) {",
      "            cnt++;",
      "            num /= i;",
      "        }",
      "        if (cnt) res.emplace_back(i, cnt);",
      "    }",
      "    if (num != 1) res.emplace_back(make_pair(num, 1));",
      "    return res;",
      "}"
    ],
    "description": ""
  },
  "gcd": {
    "prefix": "gcd",
    "body": [
      "int gcd(int a, int b) {",
      "  if(a<b) swap(a,b);",
      "  int c = -1;",
      "  while(c != 0){",
      "    c = a % b;",
      "    a = b;",
      "    b = c;",
      "  }",
      "  return a;",
      "}"
    ],
    "description": "aとbの最大公約数 = gcd(a, b)"
  },
  "eratosthenes": {
    "prefix": "eratosthenes",
    "body": [
      "vector<bool> sieve_of_eratosthenes(int n) {",
      "    vector<bool> is_prime(n + 1, true);",
      "    is_prime[0] = is_prime[1] = false;",
      "    for (int i = 2; i * i <= n; ++i)",
      "            if (is_prime[i])",
      "                    for (int k = 2 * i; k <= n; k += i)",
      "                            is_prime[k] = false;",
      "    return is_prime;",
      "}"
    ],
    "description": "素数ならtrue"
  }
}
